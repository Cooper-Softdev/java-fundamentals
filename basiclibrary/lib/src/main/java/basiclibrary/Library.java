/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {

  public int[] roll(int numberOfRolls) {
    Random randomNumberGenerator = new Random();

    int[] rollResults = new int[numberOfRolls];

    for (int i = 0; i < numberOfRolls; i++) {
      rollResults[i] = randomNumberGenerator.nextInt(6) + 1;
    }
    return rollResults;
  }

  public boolean containsDuplicates(int[] Arr) {
    for (int i = 0; i < Arr.length - 1; i++) {
      //what a nightmare this is, I haven't thought about nested for-loops in a month
      for (int j = i + 1; j < Arr.length; j++) {
        if (Arr[i] == Arr[j]) {
          return true;
        }
      }
    }
    return false;
  }

  public double average(int[] arr) {
    int total = 0;

    for (int i = 0; i < arr.length; i++) {
      total = total + arr[i];
    }
    return (double) total / arr.length;
  }

  public int[] lowestAverage(int[][] arrays) {
    int minIndex = 0;

    double minAverage = Double.MAX_VALUE;

    for (int i = 0; i < arrays.length; i++) {
      double currentAverage = average(arrays[i]);

      if (currentAverage < minAverage) {
        minIndex = i;
        minAverage = currentAverage;
      }
    }
    return arrays[minIndex];
  }


  public String analyzeTemps(int[][] weeklyMonthTemperatures) {
    int lowTemp = Integer.MAX_VALUE;
    int highTemp = Integer.MIN_VALUE;
    HashSet<Integer> uniqueTemps = new HashSet<>();
// Found out from a YouTube video what an enhanced for loop is... I understand this better.
    for (int[] week : weeklyMonthTemperatures) {
      for (int dlyTemp : week) {
        if (dlyTemp < lowTemp) {
          lowTemp = dlyTemp;
        }
        if (dlyTemp > highTemp) {
          highTemp = dlyTemp;
        }
        uniqueTemps.add(dlyTemp);
      }
    }

    StringBuilder output = new StringBuilder();
    output.append("High: ").append(highTemp).append("\n");
    output.append("Low: ").append(lowTemp).append("\n");

    for (int i = lowTemp; i <= highTemp; i++) {
      if (!uniqueTemps.contains(i)) {
        output.append("Never saw temperature: ").append(i).append("\n");
      }
    }
    return output.toString();
  }

  public String tally(List<String> votes) {
    HashMap<String, Integer> voteTally = new HashMap<>();

    for (String voteItem : votes) {
      if (voteTally.containsKey(voteItem)) {
        voteTally.put(voteItem, voteTally.get(voteItem) + 1);
      } else {
        voteTally.put(voteItem, 1);
      }
    }

    String winner = "";
    int totalVotes = 0;
    for (Map.Entry<String, Integer> entry : voteTally.entrySet()) {
      if (entry.getValue() > totalVotes) {
        winner = entry.getKey();
        totalVotes = entry.getValue();
      }
    }
    System.out.println(winner + " received the most votes!");
    return winner;
  }
}

